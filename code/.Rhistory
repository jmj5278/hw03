is_nonnegative(-2)
is_positive_integer<-function(x){
if(x>0){
return(x%%1 == 0)
}else{
return(FALSE)}
}
#TRUE's
is_positive_integer(2)
is_positive_integer(2L)
#FALSE's
is_positive_integer(0)
is_positive_integer(-2)
bin_factorial <- function(x) {
factorial <- 1
if(x != 0) {
for (i in 1:x) {
factorial <- factorial*i
}
return(factorial)
} else {
return(1)
}
}
bin_factorial(-1)
factorial(-1)
bin_factorial(-20)
bin_factorial(5)
bin_factorial<-function(n){
if(n < 0) {
stop("factorial does not exist for negative numbers")
} else if(n == 0) {
return(1)}
y<-1
for(k in 1:n){
y<-y*((1:n)[k])
}
y
}
#valid
bin_factorial(5)
bin_factorial(0)
bin_factorial(-1)
bin_factorial<-function(n){
if(n < 0) {
stop("factorial does not exist for negative numbers")
} else if(n == 0) {
return(1)}
y<-1
for(k in 1:n){
y<-y*k
}
y
}
#valid
bin_factorial(5)
bin_factorial(0)
bin_factorial(-1)
bin_factorial<-function(n){
if(n < 0) {
stop("factorial does not exist for negative numbers")
} else if(n == 0) {
return(1)}
y<-1
for(k in 1:n){
y<-y*k
}
return(y)
}
#valid
bin_factorial(5)
bin_factorial(0)
bin_factorial(-1)
bin_factorial<-function(n){
if(n < 0) {
stop("factorial does not exist for negative numbers")
} else if(n == 0) {
return(1)}
y<-1
for(k in 1:n){
y<-y*k
}
return(y)
}
#valid
bin_factorial(5)
bin_factorial(0)
bin_factorial(-1)
bin_combinations<-function(n,k){
c<-bin_factorial(n)/(bin_factorial(k)*(bin_factorial(n-k)))
return(c)}
#valid
bin_combinations(5,2)
bin_combinations(10,3)
bin_combinations(4,4)
bin_probability <- function(t,s,p){
if(!is_nonneg_integer(t)){
stop('Trials must be a positive-integer number')}
if(!is_nonneg_integer(s)){
stop('Success must be a positive-integer number')}
if(!is_probability(p)){
stop('probability must be between 0 and 1')}
prob<-bin_combinations(t,s)*(p^s)*((1-p))^(t-s)
return(prob)
}
#valid
bin_probability(5,2,0.5)
is_nonneg_integer<-function(x){
if(x>=0){
return(x%%1 == 0)
}else{
return(FALSE)}
}
#TRUE's
is_nonneg_integer(0)
is_nonneg_integer(1)
#FALSE's
is_nonneg_integer(-1)
is_nonneg_integer(-2.5)
View(is_nonnegative)
View(is_nonneg_integer)
bin_probability <- function(t,s,p){
if(!is_nonneg_integer(t)){
stop('Trials must be a positive-integer number')}
if(!is_nonneg_integer(s)){
stop('Success must be a positive-integer number')}
if(!is_probability(p)){
stop('probability must be between 0 and 1')}
prob<-bin_combinations(t,s)*(p^s)*((1-p))^(t-s)
return(prob)
}
#valid
bin_probability(5,2,0.5)
is_integer<-function(x){
if(is.numeric(x)){
return(x%%1==0)
}else{
return(FALSE)}
}
#TRUE's
is_integer(-1)
is_integer(0)
is_integer(2L)
is_integer(2)
#FALSE's
is_integer(2.1)
is_integer(pi)
is_integer(0.01)
#Function is_positive()
# ===================================================================
#' @title is_poisitive
#' @description test if a numeric value is a positive number
#' @param x a sigle numeric value
#' @return is_positive() if the number is positive, return TRUE
# ===================================================================
is_positive<-function(x){
if(x>0){
return(TRUE)
}else{
return(FALSE)}
}
#TRUE's
is_positive(0.01)
is_positive(2)
#FALSE's
is_positive(-2)
is_positive(0)
#Function is_nonnegative()
# ===================================================================
#' @title is_nonnegative
#' @description test if a numeric value is a non-negative number
#' @param  x a single numeric value
#' @return is_nonnegative() if the number is non-negative,return TRUE
# ===================================================================
is_nonnegative<-function(x){
if(x>=0){
return(TRUE)
}else{
return(FALSE)}
}
#TRUE's
is_nonnegative(0)
is_nonnegative(2)
#FALSE's
is_nonnegative(-0.00001)
is_nonnegative(-2)
#Function is_positive_integer()
# ===================================================================
#' @title is_positive_integer
#' @description test if a numeric value is a positive integer number
#' @param  x a single numeric value
#' @return is_positive_integer if it's a positive integer number,TRUE
# ===================================================================
is_positive_integer<-function(x){
if(x>0){
return(x%%1 == 0)
}else{
return(FALSE)}
}
#TRUE's
is_positive_integer(2)
is_positive_integer(2L)
#FALSE's
is_positive_integer(0)
is_positive_integer(-2)
#Function is_nonneg_integer()
# ===================================================================
#' @title is_nonneg_integer
#' @description test if a numeric value is a nonnegative integer number
#' @param  x a single numeric value
#' @return is_nonneg_integer if it's a nonnegative integer number,TRUE
# ===================================================================
is_nonneg_integer<-function(x){
if(x>=0){
return(x%%1 == 0)
}else{
return(FALSE)}
}
#TRUE's
is_nonneg_integer(0)
is_nonneg_integer(1)
#FALSE's
is_nonneg_integer(-1)
is_nonneg_integer(-2.5)
#Function is_probability()
# ===================================================================
#' @title is_probability
#' @description test if a given number p is a valid probability
#' @param  p a probability 0<=p<=1
#' @return is_probability if the inputs is a valid probability,TRUE
# ===================================================================
is_probability<-function(p){
if(0<=p & 1>=p){
return(TRUE)
}else{
return(FALSE)}
}
#TRUE's
is_probability(0)
is_probability(0.5)
is_probability(1)
#FALSE's
is_probability(-1)
is_probability(1.0000001)
#Function bin_factorial()
# ===================================================================
#' @title bin_factorial
#' @description calculate the factorial of a nonnegative integer n
#' @param  n nonnegative integer
#' @return bin_factorial
# ===================================================================
bin_factorial<-function(n){
if(n < 0) {
stop("factorial does not exist for negative numbers")
} else if(n == 0) {
return(1)}
y<-1
for(k in 1:n){
y<-y*k
}
return(y)
}
#valid
bin_factorial(5)
bin_factorial(0)
bin_factorial(-1)
#Function bin_combiations()
# ===================================================================
#' @title bin_combination
#' @description calculate the number of combinations
#'              where k successes can occur in n trials
#' @param  n nonnegative integer
#' @param  k a variable that represents the number of success
#' @return bin_combinations
# ===================================================================
bin_combinations<-function(n,k){
c<-bin_factorial(n)/(bin_factorial(k)*(bin_factorial(n-k)))
return(c)}
#valid
bin_combinations(5,2)
bin_combinations(10,3)
bin_combinations(4,4)
bin_probability <- function(t,s,p){
if(!is_nonneg_integer(t)){
stop('Trials must be a positive-integer number')}
if(!is_nonneg_integer(s)){
stop('Success must be a positive-integer number')}
if(!is_probability(p)){
stop('probability must be between 0 and 1')}
prob<-bin_combinations(t,s)*(p^s)*((1-p))^(t-s)
return(prob)
}
#valid
bin_probability(5,2,0.5)
bin_distribution <- function(trials, prob) {
probability <- rep(0,trials+1)
success <- 0:trials
for(i in 0:trials) {
probability[i+1] <- bin_probability(trials, i, prob)
}
return(data.frame(success, probability))
}
bin_distribution(trials=5, prob=0.5)
bin_distribution <- function(t, p) {
probability <- rep(0,t+1)
success <- 0:t
for(i in 0:t) {
probability[i+1] <- bin_probability(t, i, p)
}
return(data.frame(success, probability))
}
bin_distribution(5,0.5)
knitr::opts_chunk$set(echo = TRUE, error= TRUE, fig.path = 'images/')
source("code/binomial-functions.R")
source("code/binomial-functions.R")
#getting 'six': 3 successes in 10 trials
bin_probability(10,3,(1/6))
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = 'images/')
bin_probability(trials = 10, success = 3, prob = 1/6)
#binomial distribution:10 trials to get 'six'
bin_distribution(10,0.25)
binomial_hist <- bin_distribution( 10, 0.25)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("lightblue"), border = "yellow")
#binomial distribution:10 trials to get 'six'
bin_distribution(10,0.25)
binomial_hist <- bin_distribution( 10, 0.25)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("pink"), border = "black")
probability <- 0
for (i in 4:5) {
probability = bin_probability( 5, i, 0.35) + probability
}
probability
probability <- 0
for (i in 4:5) {
probability = bin_probability( 5, i, 0.35) + probability
}
probability
#binomial distribution:15 trials to obtain head
library(ggplot2)
binomial_plot <- bin_distribution(15, 0.35)
ggplot(data = binomial_plot, aes(success, probability)) +
geom_point()+
geom_line()+
theme_minimal()
#binomial distribution:10 trials to get 'six'
bin_distribution(10,0.25)
binomial_hist <- bin_distribution( 10, 0.25)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("pink"), border = "black")
ggplot(data = bin_distribution( 10, 0.25), aes(success,probability))+
geom_line()
geom_histogram()
#binomial distribution:10 trials to get 'six'
bin_distribution(10,0.25)
binomial_hist <- bin_distribution( 10, 0.25)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("pink"), border = "black")
ggplot(data = bin_distribution( 10, 0.25), aes(success,probability))+
geom_line()
geom_point()
#binomial distribution:10 trials to get 'six'
bin_distribution(10,0.25)
binomial_hist <- bin_distribution( 10, 0.25)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("pink"), border = "black")
ggplot(data = bin_distribution( 10, 0.25), aes(success,probability))+
geom_point()+
geom_line()
#binomial distribution:10 trials to get 'six'
bin_distribution(10,0.25)
binomial_hist <- bin_distribution( 10, 0.25)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("pink"), border = "black")
ggplot(data = bin_distribution( 10, 0.25), aes(success,probability))+
geom_histogram()+
geom_line()
#binomial distribution:10 trials to get 'six'
bin_distribution(10,0.25)
binomial_hist <- bin_distribution( 10, 0.25)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("pink"), border = "black")
ggplot(data = bin_distribution( 10, 0.25), aes(success,probability))+
geom_point()+
geom_line()
#binomial distribution:15 trials to obtain head
library(ggplot2)
binomial_plot <- bin_distribution(15, 0.35)
ggplot(data = binomial_plot, aes(success, probability)) +
geom_point()+
geom_line()+
geom_tile("Binomial Distribution")
theme_minimal()
#binomial distribution:15 trials to obtain head
library(ggplot2)
binomial_plot <- bin_distribution(15, 0.35)
ggplot(data = binomial_plot, aes(success, probability)) +
geom_point()+
geom_line()+
geom_tile("Binomial Distribution")+
theme_minimal()
#binomial distribution:15 trials to obtain head
library(ggplot2)
binomial_plot <- bin_distribution(15, 0.35)
ggplot(data = binomial_plot, aes(success, probability)) +
geom_point()+
geom_line()+
ggtitle("Binomial Distribution")+
theme_minimal()
#binomial distribution:15 trials to obtain head
library(ggplot2)
binomial_hist <- bin_distribution( 15, 0.35)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("pink"), border = "black")
binomial_plot <- bin_distribution(15, 0.35)
ggplot(data = binomial_plot, aes(success, probability)) +
geom_point()+
geom_line()+
ggtitle("Binomial Distribution")+
theme_minimal()
#binomial distribution:15 trials to obtain head
library(ggplot2)
binomial_hist <- bin_distribution(15, 0.35)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("pink"), border = "black")
binomial_plot <- bin_distribution(15, 0.35)
ggplot(data = binomial_plot, aes(success, probability)) +
geom_histogram()+
geom_line()+
ggtitle("Binomial Distribution")+
theme_minimal()
#binomial distribution:15 trials to obtain head
library(ggplot2)
binomial_hist <- bin_distribution(15, 0.35)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("pink"), border = "black")
binomial_plot <- bin_distribution(15, 0.35)
ggplot(data = binomial_plot, aes( probability)) +
geom_histogram()+
geom_line()+
ggtitle("Binomial Distribution")+
theme_minimal()
#binomial distribution:15 trials to obtain head
library(ggplot2)
binomial_hist <- bin_distribution(15, 0.35)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("pink"), border = "black")
binomial_plot <- bin_distribution(15, 0.35)
ggplot(data = binomial_plot, aes(success, probability)) +
geom_histogram(aes(probability))+
geom_line(aes(success,probability))+
ggtitle("Binomial Distribution")+
theme_minimal()
#binomial distribution:15 trials to obtain head
library(ggplot2)
binomial_hist <- bin_distribution(15, 0.35)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("pink"), border = "black")
binomial_plot <- bin_distribution(15, 0.35)
ggplot(data = binomial_plot, aes(success, probability)) +
geom_point()+
geom_line()+
ggtitle("Binomial Distribution")+
theme_minimal()
library(ggplot2)
library(ggplot2)
source("code/binomial-functions.R")
#getting 'six': 3 successes in 10 trials
bin_probability(10,3,(1/6))
#binomial distribution:10 trials to get 'six'
bin_distribution(10,0.25)
binomial_hist <- bin_distribution( 10, 0.25)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("pink"), border = "black")
#prob of geeting more than 3 heads in 5 tosses
probability <- 0
for (i in 4:5) {
probability = bin_probability( 5, i, 0.35) + probability
}
probability
#binomial distribution:15 trials to obtain head
binomial_hist <- bin_distribution(15, 0.35)
barplot(binomial_hist$probability, names.arg = binomial_hist$success,
main = "Binomial Distribution", xlab="Success", ylab="Probability",
col = c("pink"), border = "black")
binomial_plot <- bin_distribution(15, 0.35)
ggplot(data = binomial_plot, aes(success, probability)) +
geom_point()+
geom_line()+
ggtitle("Binomial Distribution")+
theme_minimal()
#binomial distribution:15 trials to obtain head
binomial_plot <- bin_distribution(15, 0.35)
ggplot(data = binomial_plot, aes(success, probability)) +
geom_point()+
geom_line()+
ggtitle("Binomial Distribution")+
theme_minimal()
